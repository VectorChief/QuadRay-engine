================================================================================

To build QuadRay engine demo on Linux, open terminal window,
go to the project's root folder,
make sure necessary tools and libraries are installed
for native builds (binary ABI matches host):
    sudo apt-get install make g++ libxext-dev
for multilib builds (if libs are available):
    sudo apt-get install make g++-multilib libxext-dev:i386
run for x86 architecture:
    make -f RooT_make_x86.mk
    ./Root.x86
run for x64 architecture:
    make -f RooT_make_x64.mk
    ./Root.x64_32
run for non-x86 architectures:
    make -f RooT_make_***.mk
    ./Root.***
Prerequisites for building/emulating guest non-x86 architectures as well as
configurations for particular hardware platforms are given in the makefiles.
Only DEB-based distributions (Mint, Ubuntu, Debian) are supported for now,
users of RPM-based distributions need to figure out build-deps on their own.

================================================================================

To build QuadRay engine demo on Windows,
go to the project's root folder and open:
    RooT_workspace.dsw
in Visual C++ 6.0 or later, then press F5. In newer versions of VC++ agree to
convert workspace files, then exit and open newly created solution file.

================================================================================

To build SIMD test framework on Linux, open terminal window,
go to the project's root folder, then "test" subfolder,
make sure necessary tools and libraries are installed
for native builds (binary ABI matches host):
    sudo apt-get install make g++
for multilib builds (if libs are available):
    sudo apt-get install make g++-multilib
run for x86 architecture:
    make -f simd_make_x86.mk
    ./simd_test.x86
run for x64 architecture:
    make -f simd_make_x64.mk
    ./simd_test.x64_32
run for non-x86 architectures:
    make -f simd_make_***.mk
    ./simd_test.***
Prerequisites for building/emulating guest non-x86 architectures as well as
configurations for particular hardware platforms are given in the makefiles.
Only DEB-based distributions (Mint, Ubuntu, Debian) are supported for now,
users of RPM-based distributions need to figure out build-deps on their own.

================================================================================

To build SIMD test framework on Windows,
go to the project's root folder, then "test" subfolder and open:
    simd_workspace.dsw
in Visual C++ 6.0 or later, then press F5. In newer versions of VC++ agree to
convert workspace files, then exit and open newly created solution file.

================================================================================

To build CORE test framework on Linux, open terminal window,
go to the project's root folder, then "test" subfolder,
make sure necessary tools and libraries are installed
for native builds (binary ABI matches host):
    sudo apt-get install make g++
for multilib builds (if libs are available):
    sudo apt-get install make g++-multilib
run for x86 architecture:
    make -f core_make_x86.mk
    ./core_test.x86
run for x64 architecture:
    make -f core_make_x64.mk
    ./core_test.x64_32
run for non-x86 architectures:
    make -f core_make_***.mk
    ./core_test.***
Prerequisites for building/emulating guest non-x86 architectures as well as
configurations for particular hardware platforms are given in the makefiles.
Only DEB-based distributions (Mint, Ubuntu, Debian) are supported for now,
users of RPM-based distributions need to figure out build-deps on their own.

================================================================================

To build CORE test framework on Windows,
go to the project's root folder, then "test" subfolder and open:
    core_workspace.dsw
in Visual C++ 6.0 or later, then press F5. In newer versions of VC++ agree to
convert workspace files, then exit and open newly created solution file.

================================================================================

To build QEMU emulator from source on Linux, download the latest version from
    http://wiki.qemu.org/Download
and unpack the archive, open terminal window, go to the project's root folder,
make sure necessary tools and libraries are installed:
    sudo apt-get install make g++ zlib1g-dev libglib2.0-dev libpixman-1-dev
run configure script:
    ./configure
run multithreaded make:
    make -j8
run installation script:
    sudo make install

When building QEMU from source isn't necessary install the full binary package:
    sudo apt-get install qemu

================================================================================
