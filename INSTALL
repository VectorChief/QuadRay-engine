================================================================================

To build QuadRay engine demo on Linux, open terminal window,
go to QuadRay's "root" folder,
make sure necessary tools and libraries are installed
for native builds (binary ABI matches host):
    sudo apt-get install make g++ clang libxext-dev
for multilib builds (if libs are available):
    sudo apt-get install make g++-multilib clang libxext-dev:i386
run for x86 architecture:
    make -f RooT_make_x86.mk
    ./Root.x86
run for x64 architecture:
    make -f RooT_make_x64.mk
    ./Root.x64f32
run for non-x86 architectures:
    make -f RooT_make_***.mk
    ./Root.***
Prerequisites for building/emulating guest non-x86 architectures as well as
configurations for particular hardware platforms are given in the makefiles.
Only DEB-based distributions (Mint, Ubuntu, Debian) are supported for now,
users of RPM-based distributions need to figure out build-deps on their own.

================================================================================

To build QuadRay engine demo on Windows,
go to QuadRay's "root" folder and open (in Visual C++ 6.0 or later):
    RooT_workspace.dsw
In newer versions of VC++ agree to convert workspace files.
Exit and open newly created solution file for development.
Select "Release" build target in drop-down list/menus, then press F5.

To build QuadRay engine demo for 64-bit Windows,
download and install TDM64-GCC toolchain (tdm64-gcc-5.1.0-2.exe),
then open QuadRay's "root" folder and run (from Windows UI):
    RooT_make_w64.bat
produced RooT_w64f32.exe binary file will launch upon build completion.

================================================================================

To build CORE test framework on Linux, open terminal window,
go to QuadRay's "test" folder,
make sure necessary tools and libraries are installed
for native builds (binary ABI matches host):
    sudo apt-get install make g++
for multilib builds (if libs are available):
    sudo apt-get install make g++-multilib
run for x86 architecture:
    make -f core_make_x86.mk
    ./core_test.x86
run for x64 architecture:
    make -f core_make_x64.mk
    ./core_test.x64f32
run for non-x86 architectures:
    make -f core_make_***.mk
    ./core_test.***
Prerequisites for building/emulating guest non-x86 architectures as well as
configurations for particular hardware platforms are given in the makefiles.
Only DEB-based distributions (Mint, Ubuntu, Debian) are supported for now,
users of RPM-based distributions need to figure out build-deps on their own.

================================================================================

To build CORE test framework on Windows,
go to QuadRay's "test" folder and open (in Visual C++ 6.0 or later):
    core_workspace.dsw
In newer versions of VC++ agree to convert workspace files.
Exit and open newly created solution file for development.
Select "Release" build target in drop-down list/menus, then press F5.

To build CORE test framework for 64-bit Windows,
download and install TDM64-GCC toolchain (tdm64-gcc-5.1.0-2.exe),
then open QuadRay's "test" folder and run (from Windows UI):
    core_make_w64.bat
produced core_test_w64f32.exe binary file will launch upon build completion.

================================================================================

To build SIMD test framework on Linux, open terminal window,
go to QuadRay's "test" folder,
make sure necessary tools and libraries are installed
for native builds (binary ABI matches host):
    sudo apt-get install make g++
for multilib builds (if libs are available):
    sudo apt-get install make g++-multilib
run for x86 architecture:
    make -f simd_make_x86.mk
    ./simd_test.x86
run for x64 architecture:
    make -f simd_make_x64.mk
    ./simd_test.x64f32
run for non-x86 architectures:
    make -f simd_make_***.mk
    ./simd_test.***
Prerequisites for building/emulating guest non-x86 architectures as well as
configurations for particular hardware platforms are given in the makefiles.
Only DEB-based distributions (Mint, Ubuntu, Debian) are supported for now,
users of RPM-based distributions need to figure out build-deps on their own.

================================================================================

To build SIMD test framework on Windows,
go to QuadRay's "test" folder and open (in Visual C++ 6.0 or later):
    simd_workspace.dsw
In newer versions of VC++ agree to convert workspace files.
Exit and open newly created solution file for development.
Select "Release" build target in drop-down list/menus, then press F5.

To build SIMD test framework for 64-bit Windows,
download and install TDM64-GCC toolchain (tdm64-gcc-5.1.0-2.exe),
then open QuadRay's "test" folder and run (from Windows UI):
    simd_make_w64.bat
produced simd_test_w64f32.exe binary file will launch upon build completion.

================================================================================

To build QEMU emulator from source on Linux, download the latest version from
    http://wiki.qemu.org/Download
and unpack the archive, open terminal window, go to QEMU's root folder,
make sure necessary tools and libraries are installed:
    sudo apt-get install make g++
    sudo apt-get install libfdt-dev libglib2.0-dev libpixman-1-dev zlib1g-dev
when building QEMU 3.0.0 for SVE targets apply patch for sve-max-vq cpu property
from https://patchwork.kernel.org/patch/10541199/  (scroll down and click diff):
    patch -p1 < ../for-3.0-target-arm-Add-sve-max-vq-cpu-property-to--***.diff
run configure script:
    ./configure
run multithreaded make:
    make -j8
run installation script:
    sudo make install

When building QEMU from source isn't necessary install a full binary package:
    sudo apt-get install qemu

================================================================================

To emulate future x86 targets (AVX-512) on modern x86 Linux hosts use Intel SDE:
    http://software.intel.com/en-us/articles/intel-software-development-emulator

In terminal window for 32-bit x86 use:
    path-to-kit/sde   -knl -- ./test/simd_test.x86 -c 1
    path-to-kit/sde   -skx -- ./test/simd_test.x86 -c 1
In terminal window for 64-bit x64 use:
    path-to-kit/sde64 -knl -- ./test/simd_test.x64f32 -c 1
    path-to-kit/sde64 -skx -- ./test/simd_test.x64f32 -c 1
for AVX512F (Knights Landing) and AVX512DQ (Skylake-X) respectively.
Use "-c 1" option to reduce test time when emulating with Intel SDE.

================================================================================

To experiment with Linux in AArch64 mode on Raspberry Pi 3 consider:

1) Devuan Jessie 1.0.0 (arm64 raspi3 image) 23-May-2017:
    https://devuan.org/
    https://files.devuan.org/devuan_jessie/embedded/
image boot credentials:
    login: root
    password: toor

2) openSUSE Leap42.2 XFCE (arm64 raspi3 image) 23-Jun-2017:
    https://en.opensuse.org/HCL:Raspberry_Pi3
    http://download.opensuse.org/ports/aarch64/distribution/leap/42.2/appliances
image boot credentials:
    login: root
    password: linux

Flashing images above to an SD card is similar to a Raspbian installation:
http://www.raspberrypi.org/documentation/installation/installing-images/linux.md

Devuan image requires additional partition resizing steps after flashing:
    http://elinux.org/RPi_Resize_Flash_Partitions (performed on RPi using fdisk)
as well as installing XFCE once the image is booted (credentials above):
    apt-get update
    apt-get install xfce4 (choose keyboard layout)
    apt-get install make g++ clang libxext-dev
    startx (choose "default config" on first start)
    (launch terminal window in XFCE)
    apt-get install firefox-esr unzip
to setup ARM Instruction Emulator for SVE on AArch64 hosts, install modules:
    apt-get install environment-modules
    (reboot)

openSUSE image is RPM based (boots directly to XFCE, credentials above):
    zypper in make gcc-c++ clang libXext-devel
to setup ARM Instruction Emulator for SVE on AArch64 hosts, install modules:
    zypper in environment-modules
    (reboot)

Download the ARM IE and install it (Ubuntu16.04 for Devuan, SUSE12 for SUSE):
https://developer.arm.com/products/software-development-tools/
                                        /hpc/arm-instruction-emulator/download
    cd Downloads
    tar -xzf ARM-Instruction-Emulator_18.2_AArch64_***_aarch64.tar.gz
    cd ARM-Instruction-Emulator_18.2_AArch64_***_aarch64
    ./arm-instruction-emulator-18.2_Generic-AArch64_***_aarch64-linux-***.sh
    (scroll down and type: yes <enter>, when license shows up on the screen)
    (reboot)
    module use /opt/arm/modulefiles
    module avail
    module load Generic-AArch64/***/arm-instruction-emulator/18.2
    (armie should now be available in the PATH variable, check vector lengths)
    armie -mlist-vector-lengths

Download the archive from github.com and unpack it (in terminal window):
    cd Downloads
    unzip QuadRay-engine-master.zip
    cd QuadRay-engine-master/root
    make -f RooT_make_a64.mk -j4
    ./Root.a64f32
to test SVE targets with ARM Instruction Emulator put -DRT_512=1 into makefile:
    nano simd_make_a64.mk (edit file, Ctrl-O, Enter, Ctrl-X)
    nano core_make_a64.mk (edit file, Ctrl-O, Enter, Ctrl-X)
then run:
    make -f simd_make_a64.mk -j4
    armie -msve-vector-bits=512 -- ./simd_test.a64f32 -c 1
    make -f core_make_a64.mk -j4
    armie -msve-vector-bits=512 -- ./core_test.a64f32 -c 1 -i

Adjust QuadRay's makefiles to use g++ instead of triplet name, remove -no-pie
    nano RooT_make_a64.mk (edit file, Ctrl-O, Enter, Ctrl-X)

Current frequency (600Mhz idle, 1200Mhz load) can be monitored using:
cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq   (tested both images)

Devuan image has support for USB flash drives, but offers 16-bit display output,
it also requires setting frequency scaling governor for maximum performance:
echo "performance" | tee /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor

openSUSE image has newer clang, 32-bit display output, but no USB flash drives,
although it offers high performance immediately, it lacks CPU scaling_governor

================================================================================
